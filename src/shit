function ball(x, y, v, theta, r, img, ctx, g, drag) {
  this.x = x;
  this.y = y;
  this.v = v;
  this.theta = theta;
  this.r = r;
  this.img = img;
  var vx = v * Math.cos((theta / 180) * Math.PI);
  var vy = -v * Math.sin((theta / 180) * Math.PI);
  this.vx = vx;
  this.vy = vy;
  this.cx = x + r / 2;
  this.cy = y + r / 2;
  this.positions = [];
  this.velocities = [];
  this.accelerations = [];
  this.ctx = ctx;
  this.g = g;
  this.drag = drag || 0;
}

ball.prototype.drawAngleLines = function () {
  ctxP.beginPath();

  ctxP.setLineDash([2, 3]);
  ctxP.moveTo(this.x + 2, this.y + this.r / 2);
  ctxP.lineTo(this.x + 150, this.y + this.r / 2);
  ctxP.stroke();
  ctxP.setLineDash([1, 0]);
  //                                 ctxP.font = "16px sans-serif";
  //                                     var theta = (360-180/Math.PI*getTheta(ball.vx,ball.vy)).toFixed(1);
  //                                 ctxP.fillText("Î¸ = "+this.theta.toString(),this.cx+this.r, this.cy-10);
};

//pass canvas variables?
ball.prototype.draw = function () {
  //                             console.log("draw ", this.img);
  ctxP = this.ctx;
  cWP = ctxP.canvas.width;
  cHP = ctxP.canvas.height;
  //                                 ctxP.stroke();

  //Ball
  var vscale = 3;
  ballImg.src = this.img;
  // console.log("this.img",this.img);
  ctxP.drawImage(ballImg, this.x, this.y, this.r, this.r);
  if (showVectors)
    drawArrow(
      ctxP,
      this.cx,
      this.cy,
      this.cx + this.vx * vscale,
      this.cy + this.vy * vscale
    );
};

ball.prototype.move = function () {
  // g = 9.81 m/s/s
  // s -> 10s
  var scale = 0.2; // affects animation speed and 'frequency'
  //                                 g = 0.981*scale;
  var G = (this.g * scale) / 10;

  //air friction/drag:
  drag = this.drag;
  var angle = Math.atan2(this.vy, this.vx);

  this.vx -= drag * Math.cos((angle / 180) * Math.PI) * this.vx * this.vx;
  this.x += this.vx * 0.5 * scale;

  //                                 if(this.img == "/mechanics/collisions/images/Orange_ball.png") {
  //                                 console.log("angle ", angle);
  //                                 console.log("drag*Math.sin(angle)*this.vy*this.vy ",
  //                                              drag*Math.sin(angle)*this.vy*this.vy);
  //                                  }

  this.vy += G - drag * Math.sin(angle) * this.vy * this.vy;
  this.y += this.vy * 0.5 * scale;
  this.cx = this.x + this.r / 2;
  this.cy = this.y + this.r / 2;
  //                                 this.theta = Math.atan(this.vy/this.vx);
  this.positions.push([this.x + this.r / 2, this.y + this.r / 2]);
  this.velocities.push(this.vy);
  //                             this.velocities.push(Math.sqrt(this.vx*this.vx+this.vy*this.vy));
  //                             var a = Math.sqrt(Math.pow(drag*Math.cos(angle/180*Math.PI)*this.vx*this.vx,2)+Math.pow(drag*Math.sin(angle)*this.vy*this.vy,2));
  var a = drag * Math.sin(angle) * this.vy * this.vy;
  this.accelerations.push(a);
};
function loadImages(sources, callback) {
  var images = {};
  var loadedImages = 0;
  var numImages = 0;
  // get num of sources
  for (var src in sources) {
    numImages++;
  }
  for (var src in sources) {
    images[src] = new Image();
    images[src].onload = function () {
      if (++loadedImages >= numImages) {
        callback(images);
      }
    };
    images[src].src = sources[src];
  }
}

$(document).ready(function () {
  canvasP = document.getElementById("canvasProject");
  ctxP = canvasP.getContext("2d");
  canvasV = document.getElementById("canvasVelocities");
  ctxV = canvasV.getContext("2d");

  if (document.documentElement.clientWidth < 500) {
    canvasP.style.width = "100%";
    ctxP.canvas.width = document.documentElement.clientWidth; //window.innerWidth;
    canvasV.style.width = "100%";
    ctxV.canvas.width = document.documentElement.clientWidth; //window.innerWidth;
  }
  scale = 1; //ctxPcanvas.height/600;
  window.cXP = ctxP.canvas.width / 2;
  window.cYP = ctxP.canvas.height / 2;
  window.cWP = ctxP.canvas.width;
  window.cHP = ctxP.canvas.height;

  window.color1 = "rgba(255,102,0,1)";
  window.color2 = "rgba(135,93,182,1)";
  window.color3 = "#AB89D2";
  window.showVectors = true;

  // User given yi, v, angle
  window.ri = 30;
  window.floor = cHP - 20;
  window.yi = floor - ri - 1;
  window.xi = 20; //doesn't change
  window.theta = 0;
  window.v = 0;
  window.g = 0.0981;
  var requestID = 0;
  window.floorV = ctxV.canvas.height / 2;
  //
  img1 = "/mechanics/collisions/images/Orange_ball.png";
  img2 = "/mechanics/collisions/images/Purple_ball.png";
  var sources = {
    img1: img1,
    img2: img2,
  };

  ctxP.strokeStyle = "#fff";
  ctxP.fillStyle = "#fff";

  ballImg = new Image();
  ballImg2 = new Image();
  loadImages(sources, function (images) {
    initThrow();
  });

  document.getElementById("demo_presets").onchange = function () {
    switch (this.value) {
      case "Max_range":
        //                                         setValues(y1,y2,v1,v2,t1,t2,r1,r2,g1,g2,d1,d2);
        setValues(0, 30, 20, 20, 45, 32.46, 3000, 3000, 9.81, 9.81, 0, 0);
        initThrow();
        reset(true);
        break;
      case "Max_height":
        setValues(20, 10, 20, 20, 90, 90, 3000, 3000, 9.81, 9.81, 0, 0);
        initThrow();
        reset(true);
        break;
      case "dragEffect":
        setValues(0, 0, 35, 35, 65, 65, 3000, 3000, 9.81, 9.81, 0, 0.0005);
        initThrow();
        reset(true);
        break;
      case "terminal":
        setValues(70, 70, 0, 0, 90, 90, 3000, 3000, 9.81, 9.81, 0, 0.0006);
        initThrow();
        reset(true);
        break;
      case "marsEarth":
        setValues(0, 0, 20, 20, 45, 45, 3000, 3000, 9.81, 3.728, 0, 0);
        initThrow();
        reset(true);
        break;
      default:
        break;
    }
  };

  function setValues(y1, y2, v1, v2, t1, t2, r1, r2, g1, g2, d1, d2) {
    $("#Y").val(y1);
    $("#Y2").val(y2);
    $("#V").val(v1);
    $("#V2").val(v2);
    $("#drag").val(d1);
    $("#drag2").val(d2);
    $("#TH").val(t1);
    $("#TH2").val(t2);
    $("#g").val(g1);
    $("#g2").val(g2);
    $("#R").val(r1);
    $("#R2").val(r2);
  }

  $("#reset").click(function () {
    reset(false);
  });
  //                             $('#reset').click(reset(false));

  function reset(updateAll) {
    //                                     if(all fields filled) Y, V, TH
    //                                         alert("Must leave one field blank (to be calculated)");
    initThrow();
    //                                     var g = 9.81;
    var g = $("#g").val();
    var r = $("#R").val();
    var y = $("#Y").val();
    var v = $("#V").val();
    var th = (Math.PI / 180) * $("#TH").val();
    var g2 = $("#g2").val();
    var r2 = $("#R2").val();
    var y2 = $("#Y2").val();
    var v2 = $("#V2").val();
    var th2 = (Math.PI / 180) * $("#TH2").val();

    if (document.getElementById("rR").checked || updateAll) {
      var R =
        ((v * Math.cos(th)) / g) *
        (v * Math.sin(th) +
          Math.sqrt(v * v * Math.sin(th) * Math.sin(th) + 2 * g * y));
      $("#R").val(R.toFixed(3));
      var R2 =
        ((v2 * Math.cos(th2)) / g2) *
        (v2 * Math.sin(th2) +
          Math.sqrt(v2 * v2 * Math.sin(th2) * Math.sin(th2) + 2 * g2 * y2));
      $("#R2").val(R2.toFixed(3));
    } else if (document.getElementById("rY").checked) {
      var Y =
        (0.5 * ((r * r * g) / (v * v) - r * Math.sin(2 * th))) /
        Math.cos(th) /
        Math.cos(th);
      $("#Y").val(Y.toFixed(3));
      var Y2 =
        (0.5 * ((r2 * r2 * g2) / (v2 * v2) - r2 * Math.sin(2 * th2))) /
        Math.cos(th2) /
        Math.cos(th2);
      $("#Y2").val(Y2.toFixed(3));
    } else if (document.getElementById("rV").checked) {
      var V = Math.sqrt(
        (r * r * g) /
          (r * Math.sin(2 * th) + 2 * y * Math.cos(th) * Math.cos(th))
      );
      $("#V").val(V.toFixed(3));
      var V2 = Math.sqrt(
        (r2 * r2 * g2) /
          (r2 * Math.sin(2 * th2) + 2 * y2 * Math.cos(th2) * Math.cos(th2))
      );
      $("#V2").val(V2.toFixed(3));
    } else if (document.getElementById("rTH").checked) {
      var TH = 0.5 * Math.asin((g * r) / v / v);
      if (isNaN(TH)) {
        TH = Math.acos(
          Math.sqrt((2 * g * y + v * v) / (2 * g * y + 2 * v * v))
        );

        var R =
          ((v * Math.cos(TH)) / g) *
          (v * Math.sin(TH) +
            Math.sqrt(v * v * Math.sin(TH) * Math.sin(TH) + 2 * g * y));

        $("#R").val(R.toFixed(3));
      }
      TH = (180 * TH) / Math.PI;
      TH = Math.round(TH * 100) / 100;
      $("#TH").val(TH.toFixed(3));

      var TH2 = 0.5 * Math.asin((g2 * r2) / v2 / v2);
      if (isNaN(TH2)) {
        TH2 = Math.acos(
          Math.sqrt((2 * g2 * y2 + v2 * v2) / (2 * g2 * y2 + 2 * v2 * v2))
        );

        var R2 =
          ((v2 * Math.cos(TH2)) / g2) *
          (v2 * Math.sin(TH2) +
            Math.sqrt(v2 * v2 * Math.sin(TH2) * Math.sin(TH2) + 2 * g2 * y2));
        $("#R2").val(R2.toFixed(3));
      }

      TH2 = (180 * TH2) / Math.PI;
      TH2 = Math.round(TH2 * 100) / 100;

      $("#TH2").val(TH2.toFixed(3));
    } else if (document.getElementById("rg").checked || updateAll) {
      var G =
        ((v * v) / (r * r)) *
        (r * Math.sin(2 * th) + 2 * y * Math.cos(th) * Math.cos(th));
      var G2 =
        ((v2 * v2) / (r2 * r2)) *
        (r2 * Math.sin(2 * th2) + 2 * y2 * Math.cos(th2) * Math.cos(th2));

      $("#g").val(G.toFixed(3));
      $("#g2").val(G2.toFixed(3));
    }
    initThrow();
  }

  $("#throw").click(function () {
    cancelAnimationFrame(requestID);
    ctxP.clearRect(20, 0, cWP, cHP - 12);
    initThrow();
    var t = 0;

    animate();

    function animate() {
      requestID = requestAnimationFrame(animate);

      //Check the balls are above the floor
      if ((ball1.y <= floor - ri || ball2.y <= floor - ri) && t < 800) {
        t++;
        if (ball1.y <= floor - ri || ball2.y <= floor - ri) {
          ctxP.clearRect(20, 0, cWP, floor - 1);
        }
        //                                             if(t%10==0)
        drawFloor(ctxP, floor);

        //Draw paths for ball 1
        ctxP.strokeStyle = color1;
        ctxP.fillStyle = color1;

        ctxP.beginPath();
        for (var i = 0; i < ball1.positions.length; i += 2) {
          ctxP.rect(ball1.positions[i][0], ball1.positions[i][1], 1, 1);
        }
        ctxP.stroke();
        ctxP.fill();

        ctxV.strokeStyle = color1;
        ctxV.fillStyle = color1;
        ctxV.beginPath();
        for (var i = 0; i < ball1.velocities.length; i += 2) {
          ctxV.rect(2 * i + xi + 20, floorV - ball1.velocities[i] * 2, 1, 1);
        }
        ctxV.stroke();
        ctxV.fill();

        //Draw paths for ball 2

        ctxV.strokeStyle = color2;
        ctxV.fillStyle = color2;
        ctxV.beginPath();
        for (var i = 0; i < ball2.velocities.length; i += 2) {
          ctxV.rect(2 * i + xi + 20, floorV - ball2.velocities[i] * 2, 1, 1);
        }
        ctxV.stroke();
        ctxV.fill();

        ctxP.strokeStyle = color2;
        ctxP.fillStyle = color2;
        ctxP.beginPath();
        for (var i = 0; i < ball2.positions.length; i += 2) {
          ctxP.rect(ball2.positions[i][0], ball2.positions[i][1], 1, 1);
        }
        ctxP.stroke();
        ctxP.fill();

        //Draw balls
        ctxP.strokeStyle = "#222222";
        ball1.draw();
        ball2.draw();

        //Move ball to next position
        if (ball1.y <= floor - ri) ball1.move();
        if (ball2.y <= floor - ri) ball2.move();
      } else {
        console.log("ball1.x ", ball1.x);
        console.log("ball2.x ", ball2.x);
        b1range = ball1.x / 5.22;
        b2range = ball2.x / 5.22;
        $("#rangedrag").val(b1range.toFixed(0));
        $("#rangedrag2").val(b2range.toFixed(0));
        t = 0;
        //                                             drawFloor(ctx);
        cancelAnimationFrame(requestID);
      }
    }
  });

  function initThrow() {
    //Get variables from input form
    yi = floor - $("#Y").val() * 5.0 - ri - 1;
    v = $("#V").val() * 1.0; // HACK
    theta = $("#TH").val() * 1.0;
    yi2 = floor - $("#Y2").val() * 5.0 - ri - 1;
    v2 = $("#V2").val() * 1.0; // HACK
    theta2 = $("#TH2").val() * 1.0;
    g = $("#g").val() * 1.0;
    g2 = $("#g2").val() * 1.0;
    //                                     drag1 = 0.005;
    drag1 = $("#drag").val() * 1.0;
    drag2 = $("#drag2").val() * 1.0;

    ctxP.clearRect(20, 0, cWP, cHP);
    drawHeights(ctxP, floor, 5); // change to just once, and adjust clearRects
    drawFloor(ctxP, floor);
    ball1 = new ball(xi, yi, v, theta, ri, img1, ctxP, g, drag1);
    ball2 = new ball(xi, yi2, v2, theta2, ri, img2, ctxP, g2, drag2);

    cancelAnimationFrame(requestID);

    ball1.drawAngleLines();
    ball1.draw();
    ball2.drawAngleLines();
    ball2.draw();

    ctxV.clearRect(0, 0, ctxV.canvas.width, ctxV.canvas.height);
    drawFloor(ctxV, floorV);
    drawHeights(ctxV, floorV, 2);
  }

  function drawFloor(ctx, floor) {
    ctx.clearRect(20, floor - 1, ctx.canvas.width, ctx.canvas.height);
    ctx.strokeStyle = "#222222";
    ctx.fillStyle = "#222222";
    //Floor
    ctx.beginPath();
    ctx.lineWidth = 1;
    ctx.moveTo(0, floor);
    ctx.lineTo(ctx.canvas.width, floor);
    ctx.stroke();
    //Tick marks
    ctx.beginPath();
    for (var i = xi + ri / 2; i < ctx.canvas.width; i += 50) {
      //                                  ctxP.rect(i, cHP-13,1,6);

      ctx.textAlign = "center";
      ctx.fillText(Math.round((i - xi - ri / 2) / 5).toString(), i, floor + 16);
      ctx.moveTo(i, floor);
      ctx.lineTo(i, floor + 6);
      ctx.stroke();
    }
    for (var i = xi + ri / 2; i < ctx.canvas.width; i += 10) {
      //                                  ctxP.rect(i, cHP-11,1,2);
      ctx.moveTo(i, floor);
      ctx.lineTo(i, floor + 4);
      ctx.stroke();
    }
  }

  function drawHeights(ctx, floor, scale) {
    ctx.clearRect(0, 0, 20, ctx.canvas.height);

    ctx.strokeStyle = "#222222";
    ctx.fillStyle = "#222222";
    ctx.beginPath();
    ctx.lineWidth = 1;
    ctx.moveTo(xi - 1, 0);
    ctx.lineTo(xi - 1, floor * 2);
    ctx.stroke();
    //Tick marks
    ctx.beginPath();
    for (var i = floor; i > 0; i -= scale * 10) {
      ctx.textAlign = "left";
      ctx.fillText(Math.round((floor - i) / scale).toString(), 4, i - 2);
      ctx.moveTo(xi - 1, i);
      ctx.lineTo(xi - 7, i);
      ctx.stroke();
    }
    for (var i = floor + scale * 10; i < 2 * floor; i += scale * 10) {
      ctx.textAlign = "left";
      ctx.fillText(Math.round((floor - i) / scale).toString(), 4, i + 2);
      //                                     ctx.moveTo(xi-1,i);
      //                                     ctx.lineTo(xi-7,i);
      //                                     ctx.stroke();
    }
    for (var i = 2 * floor; i > 0; i -= 10) {
      //                                  ctx.rect(i, cHP-11,1,2);
      ctx.moveTo(xi - 1, i);
      ctx.lineTo(xi - 4, i);
      ctx.stroke();
    }
  }
});
